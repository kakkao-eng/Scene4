using System.Collections.Generic;
using UHFPS.Runtime;
using UnityEngine;
using UnityEngine.UI; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
// using TMPro; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ TextMeshPro

public class LightSequenceManager : MonoBehaviour
{
    public SimpleLight[] Lights;
    private List<string> CorrectSequence = new List<string> { "R", "X", "P", "D" };
    private Dictionary<string, KeyCode> KeyBindings = new Dictionary<string, KeyCode>
    {
        { "R", KeyCode.Y },
        { "X", KeyCode.U },
        { "P", KeyCode.I },
        { "D", KeyCode.O }
    };

    public KeyCode resetKey = KeyCode.T;
    private int currentStep = 0;
    private bool firstPress = false;
    private float timeRemaining = 60f;
    private bool timerRunning = false;

    public Text timeText; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    // public TMP_Text timeText; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ TextMeshPro

    public GameObject door; // ‡∏•‡∏≤‡∏Å GameObject ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Inspector

    public void ActivateLight(int lightIndex)
    {
        if (lightIndex < 0 || lightIndex >= Lights.Length)
        {
            Debug.Log("‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏ü‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
            return;
        }

        if (!firstPress)
        {
            firstPress = true;
            timerRunning = true;
        }

        if (lightIndex == currentStep)
        {
            Lights[lightIndex].SetLightState(true);
            Debug.Log($"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü {CorrectSequence[lightIndex]} ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {currentStep}");
            currentStep++;

            if (currentStep >= CorrectSequence.Count)
            {
                Debug.Log("üéâ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! üéâ");
                timerRunning = false;
                door.SetActive(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π
            }
        }
        else
        {
            Debug.Log("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡∏¥‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö! ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...");
            ResetSequence();
        }
    }

    public void ResetGame()
    {
        Debug.Log("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà!");
        ResetSequence();
    }

    private void ResetSequence()
    {
        foreach (var light in Lights)
        {
            light.SetLightState(false);
        }

        Debug.Log("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡πÅ‡∏•‡πâ‡∏ß!");
        currentStep = 0;
        firstPress = false;
        timeRemaining = 60f;
        timerRunning = false;

        if (door != null)
            door.SetActive(false); // ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    }

    void Update()
    {
        if (timerRunning)
        {
            timeRemaining -= Time.deltaTime;
            if (timeRemaining <= 0)
            {
                Debug.Log("‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö...");
                ResetSequence();
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô UI
            if (timeText != null)
            {
                timeText.text = $"Time: {Mathf.Max(0f, timeRemaining):00.00}";
            }
        }

        if (Input.GetKeyDown(resetKey))
        {
            ResetGame();
        }

        foreach (var kvp in KeyBindings)
        {
            if (Input.GetKeyDown(kvp.Value))
            {
                int index = CorrectSequence.IndexOf(kvp.Key);
                if (index == -1) continue;

                if (index == currentStep)
                {
                    ActivateLight(index);
                }
                else
                {
                    Debug.Log($"‚ùå ‡∏Å‡∏î {kvp.Key} ‡∏ú‡∏¥‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö! ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...");
                    ResetSequence();
                }
            }
        }
    }
}
